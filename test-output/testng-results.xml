<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="8" total="12" passed="2" failed="1" skipped="1">
  <reporter-output>
    <line>
      <![CDATA[@BeforeSuite]]>
    </line>
    <line>
      <![CDATA[@BeforeTest]]>
    </line>
    <line>
      <![CDATA[@BeforeClass]]>
    </line>
    <line>
      <![CDATA[@BeforeMethod]]>
    </line>
    <line>
      <![CDATA[@Test 2]]>
    </line>
    <line>
      <![CDATA[@AfterMethod]]>
    </line>
    <line>
      <![CDATA[@AfterClass]]>
    </line>
    <line>
      <![CDATA[@BeforeClass]]>
    </line>
    <line>
      <![CDATA[@BeforeMethod]]>
    </line>
    <line>
      <![CDATA[@Test 1]]>
    </line>
    <line>
      <![CDATA[@AfterMethod]]>
    </line>
    <line>
      <![CDATA[@AfterClass]]>
    </line>
    <line>
      <![CDATA[@BeforeClass]]>
    </line>
    <line>
      <![CDATA[@BeforeMethod]]>
    </line>
    <line>
      <![CDATA[@Test 0]]>
    </line>
    <line>
      <![CDATA[@AfterMethod]]>
    </line>
    <line>
      <![CDATA[@AfterClass]]>
    </line>
    <line>
      <![CDATA[@AfterTest]]>
    </line>
    <line>
      <![CDATA[@AfterSuite]]>
    </line>
  </reporter-output>
  <suite started-at="2024-03-02T15:11:17 IST" name="Suite" finished-at="2024-03-02T15:11:17 IST" duration-ms="74">
    <groups>
    </groups>
    <test started-at="2024-03-02T15:11:17 IST" name="Test" finished-at="2024-03-02T15:11:17 IST" duration-ms="74">
      <class name="listenerPractice.TestClass">
        <test-method signature="testScript()[pri:0, instance:listenerPractice.TestClass@47eaca72]" started-at="2024-03-02T15:11:17 IST" name="testScript" finished-at="2024-03-02T15:11:17 IST" duration-ms="3" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@Test 0]]>
            </line>
          </reporter-output>
        </test-method> <!-- testScript -->
        <test-method is-config="true" signature="classConfig()[pri:0, instance:listenerPractice.TestClass@47eaca72]" started-at="2024-03-02T15:11:17 IST" name="classConfig" finished-at="2024-03-02T15:11:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@BeforeClass]]>
            </line>
          </reporter-output>
        </test-method> <!-- classConfig -->
        <test-method is-config="true" signature="methodConfig()[pri:0, instance:listenerPractice.TestClass@47eaca72]" started-at="2024-03-02T15:11:17 IST" name="methodConfig" finished-at="2024-03-02T15:11:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@BeforeMethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- methodConfig -->
        <test-method is-config="true" signature="classTeardown()[pri:0, instance:listenerPractice.TestClass@47eaca72]" started-at="2024-03-02T15:11:17 IST" name="classTeardown" finished-at="2024-03-02T15:11:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@AfterClass]]>
            </line>
          </reporter-output>
        </test-method> <!-- classTeardown -->
        <test-method is-config="true" signature="methodTeardown()[pri:0, instance:listenerPractice.TestClass@47eaca72]" started-at="2024-03-02T15:11:17 IST" name="methodTeardown" finished-at="2024-03-02T15:11:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@AfterMethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- methodTeardown -->
      </class> <!-- listenerPractice.TestClass -->
      <class name="listenerPractice.TestClass2">
        <test-method is-config="true" signature="suiteConfig()[pri:0, instance:listenerPractice.TestClass2@459e9125]" started-at="2024-03-02T15:11:17 IST" name="suiteConfig" finished-at="2024-03-02T15:11:17 IST" duration-ms="4" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@BeforeSuite]]>
            </line>
          </reporter-output>
        </test-method> <!-- suiteConfig -->
        <test-method is-config="true" signature="testConfig()[pri:0, instance:listenerPractice.TestClass2@459e9125]" started-at="2024-03-02T15:11:17 IST" name="testConfig" finished-at="2024-03-02T15:11:17 IST" duration-ms="1" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@BeforeTest]]>
            </line>
          </reporter-output>
        </test-method> <!-- testConfig -->
        <test-method is-config="true" signature="classConfig()[pri:0, instance:listenerPractice.TestClass2@459e9125]" started-at="2024-03-02T15:11:17 IST" name="classConfig" finished-at="2024-03-02T15:11:17 IST" duration-ms="1" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@BeforeClass]]>
            </line>
          </reporter-output>
        </test-method> <!-- classConfig -->
        <test-method is-config="true" signature="methodConfig()[pri:0, instance:listenerPractice.TestClass2@459e9125]" started-at="2024-03-02T15:11:17 IST" name="methodConfig" finished-at="2024-03-02T15:11:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@BeforeMethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- methodConfig -->
        <test-method signature="testScript()[pri:0, instance:listenerPractice.TestClass2@459e9125]" started-at="2024-03-02T15:11:17 IST" name="testScript" finished-at="2024-03-02T15:11:17 IST" duration-ms="6" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@Test 2]]>
            </line>
          </reporter-output>
        </test-method> <!-- testScript -->
        <test-method is-config="true" signature="methodTeardown()[pri:0, instance:listenerPractice.TestClass2@459e9125]" started-at="2024-03-02T15:11:17 IST" name="methodTeardown" finished-at="2024-03-02T15:11:17 IST" duration-ms="1" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@AfterMethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- methodTeardown -->
        <test-method is-config="true" signature="classTeardown()[pri:0, instance:listenerPractice.TestClass2@459e9125]" started-at="2024-03-02T15:11:17 IST" name="classTeardown" finished-at="2024-03-02T15:11:17 IST" duration-ms="1" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@AfterClass]]>
            </line>
          </reporter-output>
        </test-method> <!-- classTeardown -->
        <test-method is-config="true" signature="testTeardown()[pri:0, instance:listenerPractice.TestClass2@459e9125]" started-at="2024-03-02T15:11:17 IST" name="testTeardown" finished-at="2024-03-02T15:11:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@AfterTest]]>
            </line>
          </reporter-output>
        </test-method> <!-- testTeardown -->
        <test-method is-config="true" signature="suiteTeardown()[pri:0, instance:listenerPractice.TestClass2@459e9125]" started-at="2024-03-02T15:11:17 IST" name="suiteTeardown" finished-at="2024-03-02T15:11:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@AfterSuite]]>
            </line>
          </reporter-output>
        </test-method> <!-- suiteTeardown -->
      </class> <!-- listenerPractice.TestClass2 -->
      <class name="listenerPractice.TestClass1">
        <test-method signature="testScript()[pri:0, instance:listenerPractice.TestClass1@1aafa419]" started-at="2024-03-02T15:11:17 IST" name="testScript" finished-at="2024-03-02T15:11:17 IST" duration-ms="3" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[null]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: null
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.fail(Assert.java:106)
at listenerPractice.TestClass1.testScript(TestClass1.java:12)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
            <line>
              <![CDATA[@Test 1]]>
            </line>
          </reporter-output>
        </test-method> <!-- testScript -->
        <test-method is-config="true" signature="classConfig()[pri:0, instance:listenerPractice.TestClass1@1aafa419]" started-at="2024-03-02T15:11:17 IST" name="classConfig" finished-at="2024-03-02T15:11:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@BeforeClass]]>
            </line>
          </reporter-output>
        </test-method> <!-- classConfig -->
        <test-method is-config="true" signature="methodConfig()[pri:0, instance:listenerPractice.TestClass1@1aafa419]" started-at="2024-03-02T15:11:17 IST" name="methodConfig" finished-at="2024-03-02T15:11:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@BeforeMethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- methodConfig -->
        <test-method is-config="true" signature="methodTeardown()[pri:0, instance:listenerPractice.TestClass1@1aafa419]" started-at="2024-03-02T15:11:17 IST" name="methodTeardown" finished-at="2024-03-02T15:11:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@AfterMethod]]>
            </line>
          </reporter-output>
        </test-method> <!-- methodTeardown -->
        <test-method signature="testScript2()[pri:0, instance:listenerPractice.TestClass1@1aafa419]" started-at="2024-03-02T15:11:17 IST" name="testScript2" finished-at="2024-03-02T15:11:17 IST" depends-on-methods="listenerPractice.TestClass1.testScript" duration-ms="0" status="SKIP">
          <exception class="java.lang.Throwable">
            <message>
              <![CDATA[Method TestClass1.testScript2()[pri:0, instance:listenerPractice.TestClass1@1aafa419] depends on not successfully finished methods]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.Throwable: Method TestClass1.testScript2()[pri:0, instance:listenerPractice.TestClass1@1aafa419] depends on not successfully finished methods
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:102)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.Throwable -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testScript2 -->
        <test-method is-config="true" signature="classTeardown()[pri:0, instance:listenerPractice.TestClass1@1aafa419]" started-at="2024-03-02T15:11:17 IST" name="classTeardown" finished-at="2024-03-02T15:11:17 IST" duration-ms="0" status="PASS">
          <reporter-output>
            <line>
              <![CDATA[@AfterClass]]>
            </line>
          </reporter-output>
        </test-method> <!-- classTeardown -->
      </class> <!-- listenerPractice.TestClass1 -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
